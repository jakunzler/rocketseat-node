// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PermissionTypeGroup {
  USER
  USER_ADMIN // TODO: Vamos precisar de um tipo diferente de usu√°rios?
}

enum Roles {
  IS_ADMIN
  IS_SUPPORT
  IS_CLIENT
}

enum TelephoneType {
  HOME
  WORK
  MOBILE
}

model User {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  name            String
  email           String            @unique
  password        String
  isActive        Boolean           @default(true) @map("is_active")
  session         Session[]
  firstLogin      DateTime?         @map("first_login")
  telephone       Telephone[]
  contact         Contact[]
  message         Message[]
  chatbotConversation ChatbotConversation[]
  address         Address[]
  avatar          String?
  birthday        DateTime?
  deletedBy       String?           @map("deleted_by")
  createdBy       String?           @map("created_by")

  @@map("users")
}

model PermissionGroups {
  id        String                 @id @default(uuid())
  createdAt DateTime               @default(now()) @map("created_at")
  updatedAt DateTime               @updatedAt @map("updated_at")
  name      String                 @unique
  type      PermissionTypeGroup    @default(USER)
  users     UserPermissionGroups[]
  role      Roles                  @default(IS_SUPPORT)

  @@unique([type, role])
  @@map("permission_groups")
}

model UserPermissionGroups {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now()) @map("created_at")
  deletedAt         DateTime?        @map("deleted_at")
  userId            String?          @map("user_id")
  permissionGroup   PermissionGroups @relation(fields: [permissionGroupId], references: [id])
  permissionGroupId String           @map("permission_group_id")

  @@unique([userId, permissionGroupId])
  @@map("user_permission_groups")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  ip        String
  userAgent String?  @map("user_agent")
  country   String?
  region    String?
  language  String?
  latitude  Float?
  longitude Float?

  @@map("sessions")
}

model Telephone {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  type      TelephoneType
  number    String
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @map("user_id")

  @@map("telephones")
}

model Contact {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  email     String?
  telephone String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  isActive  Boolean  @default(true) @map("is_active")
  deletedBy String?  @map("deleted_by")
  createdBy String?  @map("created_by")

  @@map("contact")
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isRead    Boolean  @default(false) @map("is_read")
  title     String
  content   String?
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@map("message")
}

model ChatbotConversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title String?
  content     String?          @db.VarChar(8192)
  model      String
  provider      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@map("chatbot_conversation")
}

model Address {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  street        String
  number        String
  complement    String?
  sector        String
  city          String
  state         String
  country       String
  zipCode       String      @map("zip_code")
  latitude      Float?
  longitude     Float?
  user   User @relation(fields: [userId], references: [id])
  userId String      @map("user_id")

  @@map("addresses")
}

model Note {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  content     String
  isActive    Boolean   @default(true) @map("is_active")
  deletedBy   String?   @map("deleted_by")
  createdBy   String?   @map("created_by")

  @@map("notes")
}

model Category {
  id             String           @id
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  name           String
  description    String?          @db.VarChar(2048)
  isActive       Boolean          @default(true) @map("is_active")
  deletedBy      String?          @map("deleted_by")
  createdBy      String?          @map("created_by")

  @@map("categories")
}
